# Workflow DAG (Directed Acyclic Graph)
# Defines the complete agent collaboration workflow

meta:
  version: "1.0.0"
  description: "Agent collaboration workflow for story implementation"
  updated: "2025-10-05"

# Node definitions - each agent in the workflow
nodes:
  scrum-planner:
    agent-id: "scrum-planner"
    role: "Creates sprint-ready epics and stories (Scrum)"
    outputs:
      - "story-file"
      - "epic-structure"
      - "sprint-backlog"

  kanban-planner:
    agent-id: "kanban-planner"
    role: "Creates just-in-time stories and themes (Kanban)"
    outputs:
      - "story-file"
      - "epic-theme"
      - "prioritized-backlog"
    
  developer:
    agent-id: "developer"
    role: "Implements stories with code"
    outputs:
      - "implementation-plan"
      - "completed-implementation"
      - "test-results"
    
  tech-lead:
    agent-id: "tech-lead"
    role: "Technical review and standards"
    outputs:
      - "technical-review"
      - "developer-guide-updates"
    
  architect:
    agent-id: "architect"
    role: "Architectural review and documentation"
    outputs:
      - "architecture-review"
      - "arc42-updates"
    
  manual-tester:
    agent-id: "manual-tester"
    role: "Manual testing and QA"
    outputs:
      - "test-results"
      - "bug-reports"
    
  react-ui-designer:
    agent-id: "react-ui-designer"
    role: "UI/UX design and components"
    outputs:
      - "react-components"
      - "ui-documentation"

  junior-developer-mentor:
    agent-id: "junior-developer-mentor"
    role: "Training junior developers through adaptive learning"
    outputs:
      - "trainee-assessment"
      - "custom-tutorial"
      - "progress-report"
      - "capstone-project"
      - "capstone-review"

# Edge definitions - how agents hand off to each other
edges:
  # Story creation to implementation (Scrum path)
  - from: "scrum-planner"
    to: "developer"
    data: "story-file"
    trigger: "human-assigns-story"
    description: "Scrum Planner hands sprint-ready story to Developer"

  # Story creation to implementation (Kanban path)
  - from: "kanban-planner"
    to: "developer"
    data: "story-file"
    trigger: "human-assigns-story"
    description: "Kanban Planner hands ready-to-pull story to Developer"
    
  # Developer creates plan, waits for approval
  - from: "developer"
    to: "human-approval"
    data: "implementation-plan"
    trigger: "auto"
    description: "Developer submits plan for human review"
    
  # After approval, Developer continues
  - from: "human-approval"
    to: "developer"
    data: "approved-plan"
    trigger: "approval"
    description: "Human approves plan, Developer proceeds"
    
  # Developer completes implementation, triggers parallel reviews
  - from: "developer"
    to: "tech-lead"
    data: "completed-implementation"
    trigger: "auto"
    parallel: true
    description: "Developer hands off to Tech Lead for technical review"
    
  - from: "developer"
    to: "architect"
    data: "completed-implementation"
    trigger: "auto"
    parallel: true
    description: "Developer hands off to Architect for architecture review"
    
  - from: "developer"
    to: "manual-tester"
    data: "completed-implementation"
    trigger: "auto"
    parallel: true
    description: "Developer hands off to Manual Tester for QA"
    
  # Review feedback loops back to Developer if issues
  - from: "tech-lead"
    to: "developer"
    data: "technical-review"
    trigger: "if-issues-found"
    description: "Tech Lead sends issues back to Developer"
    
  - from: "architect"
    to: "developer"
    data: "architecture-review"
    trigger: "if-issues-found"
    description: "Architect sends issues back to Developer"
    
  - from: "manual-tester"
    to: "developer"
    data: "test-results + bug-reports"
    trigger: "if-tests-failed"
    description: "Manual Tester sends failures back to Developer"
    
  # Successful reviews trigger documentation updates
  - from: "tech-lead"
    to: "tech-lead"
    data: "technical-review"
    trigger: "if-patterns-to-document"
    description: "Tech Lead updates developer guide with new patterns"
    
  - from: "architect"
    to: "architect"
    data: "architecture-review"
    trigger: "if-arc42-updates-needed"
    description: "Architect updates arc42 documentation"
    
  # All tests pass, ready for human validation
  - from: "manual-tester"
    to: "human-validation"
    data: "test-results"
    trigger: "if-tests-passed"
    description: "Manual Tester confirms all tests passed"
    
  # Human validates and marks story done
  - from: "human-validation"
    to: "story-complete"
    data: "validated"
    trigger: "human-approval"
    description: "Human validates feature and marks story complete"
    
  # Story completion updates epic progress
  - from: "story-complete"
    to: "update-epic-progress"
    data: "completed-story"
    trigger: "auto"
    description: "Story completion triggers epic progress update"

# Optional: UI design workflow
ui-workflow:
  - from: "scrum-planner"
    to: "react-ui-designer"
    data: "story-file"
    trigger: "if-ui-required"
    description: "Scrum Planner hands UI stories to React UI Designer"

  - from: "kanban-planner"
    to: "react-ui-designer"
    data: "story-file"
    trigger: "if-ui-required"
    description: "Kanban Planner hands UI stories to React UI Designer"
    
  - from: "react-ui-designer"
    to: "developer"
    data: "react-components"
    trigger: "auto"
    description: "React UI Designer hands components to Developer for integration"

# Manager meta-workflow (can be invoked at any time)
manager-workflow:
  - from: "human"
    to: "manager"
    data: "request"
    trigger: "manual-invocation"
    description: "Human invokes Manager for meta-operations"

  - from: "manager"
    to: "any-agent"
    data: "updated-agent-definition"
    trigger: "human-approval"
    description: "Manager creates/updates agents after human approval"

# Training workflow (parallel to main workflow - human-invoked)
training-workflow:
  # Initial assessment and learning path
  - from: "human"
    to: "junior-developer-mentor"
    data: "trainee-info"
    trigger: "manual-invocation"
    description: "Senior developer or trainee initiates training (assess-trainee)"

  - from: "junior-developer-mentor"
    to: "human-approval"
    data: "assessment-report + learning-path"
    trigger: "auto"
    description: "Mentor presents assessment and recommended learning path"

  - from: "human-approval"
    to: "junior-developer-mentor"
    data: "approved-learning-path"
    trigger: "approval"
    description: "Senior developer approves learning path"

  # Tutorial creation with specialist input
  - from: "junior-developer-mentor"
    to: "tech-lead"
    data: "tutorial-content-request"
    trigger: "if-coding-standards-needed"
    parallel: true
    description: "Mentor requests coding standards/best practices for tutorial"

  - from: "junior-developer-mentor"
    to: "architect"
    data: "tutorial-content-request"
    trigger: "if-architectural-content-needed"
    parallel: true
    description: "Mentor requests architectural patterns for tutorial"

  - from: "junior-developer-mentor"
    to: "developer"
    data: "example-request"
    trigger: "if-code-examples-needed"
    parallel: true
    description: "Mentor requests working code examples for tutorial"

  - from: "junior-developer-mentor"
    to: "react-ui-designer"
    data: "ui-tutorial-request"
    trigger: "if-ui-content-needed"
    parallel: true
    description: "Mentor requests UI/UX patterns for tutorial"

  # Specialists provide content back to Mentor (parallel responses)
  - from: "tech-lead"
    to: "junior-developer-mentor"
    data: "coding-standards + best-practices"
    trigger: "auto"
    parallel: true
    description: "Tech Lead provides coding guidance for tutorial"

  - from: "architect"
    to: "junior-developer-mentor"
    data: "architectural-patterns"
    trigger: "auto"
    parallel: true
    description: "Architect provides design patterns for tutorial"

  - from: "developer"
    to: "junior-developer-mentor"
    data: "code-examples"
    trigger: "auto"
    parallel: true
    description: "Developer provides working code examples"

  - from: "react-ui-designer"
    to: "junior-developer-mentor"
    data: "ui-patterns"
    trigger: "auto"
    parallel: true
    description: "React UI Designer provides UI guidance"

  # Tutorial completion and progress tracking
  - from: "junior-developer-mentor"
    to: "trainee"
    data: "custom-tutorial"
    trigger: "auto"
    description: "Mentor delivers tutorial to trainee"

  - from: "trainee"
    to: "junior-developer-mentor"
    data: "completed-exercises"
    trigger: "manual-submission"
    description: "Trainee submits completed exercises (check-progress)"

  - from: "junior-developer-mentor"
    to: "junior-developer-mentor"
    data: "progress-report"
    trigger: "if-mastery-achieved"
    description: "Mentor creates next tutorial for new topic (create-tutorial)"

  - from: "junior-developer-mentor"
    to: "trainee"
    data: "remediation-tutorial"
    trigger: "if-struggling"
    description: "Mentor provides additional support and practice"

  - from: "junior-developer-mentor"
    to: "human"
    data: "escalation-report"
    trigger: "if-trainee-not-progressing"
    description: "Mentor escalates to senior developer for intervention"

  # Capstone project workflow
  - from: "junior-developer-mentor"
    to: "scrum-planner"
    data: "capstone-requirements-request"
    trigger: "if-realistic-story-format-needed"
    description: "Mentor requests user story format for capstone (design-capstone)"

  - from: "junior-developer-mentor"
    to: "kanban-planner"
    data: "capstone-requirements-request"
    trigger: "if-realistic-story-format-needed"
    description: "Mentor requests user story format for capstone (design-capstone)"

  - from: "scrum-planner"
    to: "junior-developer-mentor"
    data: "user-story-format"
    trigger: "auto"
    description: "Scrum Planner provides story format guidance"

  - from: "kanban-planner"
    to: "junior-developer-mentor"
    data: "user-story-format"
    trigger: "auto"
    description: "Kanban Planner provides story format guidance"

  - from: "junior-developer-mentor"
    to: "trainee"
    data: "capstone-project"
    trigger: "if-readiness-above-threshold"
    description: "Mentor assigns capstone project"

  - from: "trainee"
    to: "junior-developer-mentor"
    data: "completed-capstone"
    trigger: "manual-submission"
    description: "Trainee submits capstone for review (review-capstone)"

  # Capstone multi-agent review (parallel)
  - from: "junior-developer-mentor"
    to: "tech-lead"
    data: "capstone-implementation"
    trigger: "auto"
    parallel: true
    description: "Mentor triggers Tech Lead review of capstone code"

  - from: "junior-developer-mentor"
    to: "architect"
    data: "capstone-implementation"
    trigger: "if-architectural-review-needed"
    parallel: true
    description: "Mentor triggers Architect review of capstone architecture"

  - from: "junior-developer-mentor"
    to: "manual-tester"
    data: "capstone-implementation"
    trigger: "auto"
    parallel: true
    description: "Mentor triggers Manual Tester validation of capstone"

  - from: "junior-developer-mentor"
    to: "react-ui-designer"
    data: "capstone-implementation"
    trigger: "if-ui-review-needed"
    parallel: true
    description: "Mentor triggers UI Designer review of capstone UI"

  # Specialists provide capstone reviews back to Mentor (parallel)
  - from: "tech-lead"
    to: "junior-developer-mentor"
    data: "technical-capstone-review"
    trigger: "auto"
    parallel: true
    description: "Tech Lead provides code quality review"

  - from: "architect"
    to: "junior-developer-mentor"
    data: "architectural-capstone-review"
    trigger: "auto"
    parallel: true
    description: "Architect provides architecture review"

  - from: "manual-tester"
    to: "junior-developer-mentor"
    data: "testing-capstone-review"
    trigger: "auto"
    parallel: true
    description: "Manual Tester provides QA validation"

  - from: "react-ui-designer"
    to: "junior-developer-mentor"
    data: "ui-capstone-review"
    trigger: "auto"
    parallel: true
    description: "React UI Designer provides UI review"

  # Capstone completion and production readiness
  - from: "junior-developer-mentor"
    to: "trainee"
    data: "comprehensive-capstone-review"
    trigger: "auto"
    description: "Mentor delivers aggregated review to trainee"

  - from: "junior-developer-mentor"
    to: "trainee"
    data: "revision-guidance"
    trigger: "if-revisions-needed"
    description: "Mentor provides specific revision guidance"

  - from: "junior-developer-mentor"
    to: "human"
    data: "production-ready-notification"
    trigger: "if-capstone-passed"
    description: "Mentor notifies senior developer trainee is production ready"

  - from: "human"
    to: "production-assignment"
    data: "trainee-assignment"
    trigger: "manual-decision"
    description: "Senior developer assigns production work to graduated trainee"

# Termination conditions
termination:
  success:
    condition: "All acceptance criteria met AND all reviews passed AND human validated"
    outcome: "Story marked complete, epic progress updated"

  blocked:
    condition: "Dependencies not met OR external blocker"
    outcome: "Story marked blocked, escalate to Product Owner"

  rejected:
    condition: "Fundamental issues OR requirements unclear"
    outcome: "Story returned to Product Owner for refinement"

  training-success:
    condition: "Capstone passed AND production readiness ≥90%"
    outcome: "Trainee graduates to supervised production work"

  training-extended:
    condition: "Progress slower than expected OR additional topics needed"
    outcome: "Learning path adjusted, timeline extended"

  training-blocked:
    condition: "Trainee not progressing after multiple interventions"
    outcome: "Escalate to senior developer for human decision on next steps"

# Loop detection
loops:
  developer-review-loop:
    nodes: ["developer", "tech-lead", "developer"]
    description: "Developer fixes issues from Tech Lead"
    termination: "All technical issues resolved"
    max-iterations: 5
    
  developer-architecture-loop:
    nodes: ["developer", "architect", "developer"]
    description: "Developer fixes architectural issues"
    termination: "Architecture review passed"
    max-iterations: 5
    
  developer-testing-loop:
    nodes: ["developer", "manual-tester", "developer"]
    description: "Developer fixes test failures"
    termination: "All tests passing"
    max-iterations: 10

  trainee-tutorial-loop:
    nodes: ["junior-developer-mentor", "trainee", "junior-developer-mentor"]
    description: "Trainee learns topic through tutorial and exercises"
    termination: "Mastery achieved OR escalation needed"
    max-iterations: 3

  trainee-capstone-revision-loop:
    nodes: ["junior-developer-mentor", "trainee", "junior-developer-mentor"]
    description: "Trainee revises capstone based on feedback"
    termination: "Capstone passes OR fundamental gaps identified"
    max-iterations: 2

# Parallel execution groups
parallel-groups:
  reviews:
    description: "Three agents review implementation simultaneously"
    agents:
      - "tech-lead"
      - "architect"
      - "manual-tester"
    synchronization: "All must complete before proceeding"
    failure-handling: "Any failure returns to Developer"

  tutorial-content-creation:
    description: "Specialists provide content for tutorial simultaneously"
    agents:
      - "tech-lead"
      - "architect"
      - "developer"
      - "react-ui-designer"
    synchronization: "All requested agents must respond"
    failure-handling: "Continue with available responses, note missing"

  capstone-reviews:
    description: "Specialists review capstone simultaneously"
    agents:
      - "tech-lead"
      - "architect"
      - "manual-tester"
      - "react-ui-designer"
    synchronization: "All requested agents must complete"
    failure-handling: "Aggregate available reviews, note missing"

# Workflow visualization (Mermaid format)
visualization: |
  graph TD
    SP[Scrum Planner] -->|sprint-ready story| DEV[Developer]
    KP[Kanban Planner] -->|ready-to-pull story| DEV
    DEV -->|plan| HUMAN{Human Approval}
    HUMAN -->|approved| DEV
    DEV -->|implementation| TL[Tech Lead]
    DEV -->|implementation| ARCH[Architect]
    DEV -->|implementation| TEST[Manual Tester]
    TL -->|issues| DEV
    ARCH -->|issues| DEV
    TEST -->|failures| DEV
    TL -->|patterns| TL_DOC[Update Dev Guide]
    ARCH -->|changes| ARCH_DOC[Update Arc42]
    TEST -->|passed| HUMAN_VAL{Human Validation}
    HUMAN_VAL -->|approved| DONE[Story Complete]
    DONE -->|update| EPIC[Epic Progress]

    style SP fill:#ffd700
    style KP fill:#ffd700
    style DEV fill:#90ee90
    style TL fill:#87ceeb
    style ARCH fill:#dda0dd
    style TEST fill:#ffb6c1
    style DONE fill:#98fb98

# Metrics and monitoring
metrics:
  workflow-health:
    - "Average time per workflow phase"
    - "Number of iterations in loops"
    - "Review pass rate"
    - "Human intervention frequency"
    
  bottlenecks:
    - "Which agent is most often blocked"
    - "Where do most iterations occur"
    - "Longest phase in workflow"

# Evolution notes
evolution:
  v1.0.0:
    date: "2025-10-05"
    changes: "Initial workflow definition"
    learnings: "To be collected from real usage"
    
  future-improvements:
    - "Add automated contract validation between agents"
    - "Implement workflow analytics and reporting"
    - "Add conditional paths for different story types"
    - "Create shortcuts for simple stories"

